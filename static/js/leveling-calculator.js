// leveling-calculator.js

// ★★★ スクリプトファイル自体の読み込み確認用 ★★★
console.log('[leveling-calculator.js] Script execution started.');

document.addEventListener('DOMContentLoaded', function () {
    // ★★★ DOMContentLoaded 発火確認 ★★★
    console.log('[leveling-calculator.js] DOMContentLoaded event fired.');

    // --- 定数 ---
    const COST_PER_LEVELING_SESSION = 1900; // 1回の費用

    // --- 獲得経験値設定マップ (ユーザー指定に基づく) ---
    const expSettings = {
        "default": 600000000*4, // 通常 (16億)
        "10x": 600000000*4*10,     // 10倍 (16億)
        "15x": 600000000*4*15,     // 15倍 (24億)
        "20x": 600000000*4*20      // 20倍 (32億)
    };

    // --- 経験値テーブル (Lv1-1500) ---
    const expTableLv1to1500 = {
        1: 0,       2: 102,       3: 148,       4: 455,       5: 1361,
        6: 1744,      7: 2522,      8: 3561,      9: 4249,     10: 6218,
        11: 7526,     12: 9113,     13: 11174,     14: 13036,    15: 15269,
        16: 17441,    17: 20256,    18: 22561,     19: 25225,    20: 27711,
        21: 30156,    22: 32711,    23: 35393,     24: 38032,    25: 40725,
        26: 43529,    27: 46411,    28: 49386,     29: 52441,    30: 55585,
        31: 58813,    32: 62136,    33: 65557,     34: 69075,    35: 72691,
        36: 76405,    37: 80219,    38: 84132,     39: 88145,    40: 92258,
        41: 96471,    42: 100783,   43: 105196,    44: 109708,   45: 114321,
        46: 119034,   47: 123847,   48: 128760,    49: 133773,   50: 138886,
        51: 144100,   52: 149415,   53: 154831,    54: 160348,   55: 165966,
        56: 171685,   57: 177505,   58: 183426,    59: 189448,   60: 195571,
        61: 201795,   62: 208120,   63: 214546,    64: 221073,   65: 227701,
        66: 234430,   67: 241260,   68: 248191,    69: 255223,   70: 262356,
        71: 269590,   72: 276925,   73: 284361,    74: 291898,   75: 299536,
        76: 307275,   77: 315115,   78: 323056,    79: 331098,   80: 339241,
        81: 347485,   82: 355830,   83: 364276,    84: 372823,   85: 381471,
        86: 390220,   87: 399070,   88: 408021,    89: 417073,   90: 426227,
        91: 435482,   92: 444838,   93: 454295,    94: 463853,   95: 473512,
        96: 483272,   97: 493133,   98: 503095,    99: 513158,  100: 523322,
        101: 1336413,  102: 1390213,  103: 1445313,  104: 1501713,  105: 1559413,
        106: 1618413,  107: 1678713,  108: 1740313,  109: 1803213,  110: 1867413,
        111: 1932913,  112: 1999713,  113: 2067813,  114: 2137213,  115: 2207913,
        116: 2279913,  117: 2353213,  118: 2427813,  119: 2503713,  120: 2580913,
        121: 2659413,  122: 2739213,  123: 2820313,  124: 2902713,  125: 2986413,
        126: 3071413,  127: 3157713,  128: 3245313,  129: 3334213,  130: 3424413,
        131: 3515913,  132: 3608713,  133: 3702813,  134: 3798213,  135: 3894913,
        136: 3992913,  137: 4092213,  138: 4192813,  139: 4294713,  140: 4397913,
        141: 4502413,  142: 4608313,  143: 4715613,  144: 4824313,  145: 4934413,
        146: 5045913,  147: 5158813,  148: 5273113,  149: 5388813,  150: 5505913,
        151: 5624413,  152: 5744313,  153: 5865613,  154: 5988313,  155: 6112413,
        156: 6237913,  157: 6364813,  158: 6493113,  159: 6622813,  160: 6753913,
        161: 6886413,  162: 7020813,  163: 7157113,  164: 7295313,  165: 7435413,
        166: 7577413,  167: 7721313,  168: 7867113,  169: 8014813,  170: 8164413,
        171: 8315913,  172: 8469313,  173: 8624613,  174: 8781813,  175: 8940913,
        176: 9101913,  177: 9264813,  178: 9429613,  179: 9596313,  180: 9764913,
        181: 9935413,  182: 10107813, 183: 10282113, 184: 10458313, 185: 10636413,
        186: 10816413, 187: 10998313, 188: 11182113, 189: 11367813, 190: 11555413,
        191: 11744913, 192: 11936313, 193: 12129613, 194: 12324813, 195: 12521913,
        196: 12720913, 197: 12921813, 198: 13124613, 199: 13329313, 200: 13535913,
        201: 13744413, 202: 13955313, 203: 14168613, 204: 14384313, 205: 14602413,
        206: 14822913, 207: 15045813, 208: 15271113, 209: 15498813, 210: 15728913,
        211: 15961413, 212: 16196913, 213: 16435413, 214: 16676913, 215: 16921413,
        216: 17168913, 217: 17419913, 218: 17674413, 219: 17932413, 220: 18193913,
        221: 18458913, 222: 18727913, 223: 19000913, 224: 19277913, 225: 19558913,
        226: 19843913, 227: 20133413, 228: 20427413, 229: 20725913, 230: 21028913,
        231: 21336413, 232: 21648913, 233: 21966413, 234: 22288913, 235: 22616413,
        236: 22948913, 237: 23287413, 238: 23631913, 239: 23982413, 240: 24338913,
        241: 24701413, 242: 25070913, 243: 25447413, 244: 25830913, 245: 26221413,
        246: 26618913, 247: 27024413, 248: 27437913, 249: 27859413, 250: 28288913,
        251: 28726413, 252: 29175913, 253: 29637413, 254: 30110913, 255: 30596413,
        256: 31093913, 257: 31603413, 258: 32124913, 259: 32658413, 260: 33203913,
        261: 33761413, 262: 34330913, 263: 34912413, 264: 35505913, 265: 36111413,
        266: 36728913, 267: 37358413, 268: 37999913, 269: 38653413, 270: 39318913,
        271: 39996413, 272: 40686413, 273: 41388913, 274: 42103913, 275: 42831413,
        276: 43571413, 277: 44323913, 278: 45088913, 279: 45866413, 280: 46656413,
        281: 47458913, 282: 48273913, 283: 49101413, 284: 49941413, 285: 50793913,
        286: 51658913, 287: 52536413, 288: 53426413, 289: 54328913, 290: 55243913,
        291: 56171913, 292: 57112913, 293: 58066913, 294: 59033913, 295: 60013913,
        296: 61006913, 297: 62012913, 298: 63031913, 299: 64063913, 300: 65108913,
        301: 66166913,  302: 67237913,  303: 68321913,  304: 69418913,  305: 70528913,
        306: 71651913,  307: 72787913,  308: 73936913,  309: 75098913,  310: 76273913,
        311: 77461913,  312: 78663413,  313: 79878413,  314: 81106913,  315: 82348913,
        316: 83604413,  317: 84873413,  318: 86155913,  319: 87451913,  320: 88761413,
        321: 90084413,  322: 91420913,  323: 92770913,  324: 94134413,  325: 95511413,
        326: 96901913,  327: 98305913,  328: 99723413,  329: 101154413, 330: 102598913,
        331: 104056913, 332: 105528913, 333: 107014913, 334: 108514913, 335: 110028913,
        336: 111556913, 337: 113098913, 338: 114654913, 339: 116224913, 340: 117808913,
        341: 119406913, 342: 121018913, 343: 122644913, 344: 124284913, 345: 125938913,
        346: 127606913, 347: 129288913, 348: 130984913, 349: 132694913, 350: 134418913,
        351: 136156913, 352: 137909413, 353: 139676413, 354: 141457913, 355: 143253913,
        356: 145064413, 357: 146889413, 358: 148728913, 359: 150582913, 360: 152451413,
        361: 154334413, 362: 156231913, 363: 158143913, 364: 160070413, 365: 162011413,
        366: 163966913, 367: 165936913, 368: 167921413, 369: 169920413, 370: 171933913,
        371: 173961913, 372: 176004913, 373: 178062913, 374: 180135913, 375: 182223913,
        376: 184326913, 377: 186444913, 378: 188577913, 379: 190725913, 380: 192888913,
        381: 195066913, 382: 197259913, 383: 199467913, 384: 201690913, 385: 203928913,
        386: 206181913, 387: 208449913, 388: 210732913, 389: 213030913, 390: 215343913,
        391: 217671913, 392: 220015413, 393: 222374413, 394: 224748913, 395: 227138913,
        396: 229544413, 397: 231965413, 398: 234401913, 399: 236853913, 400: 239321413,
        401: 241804413, 402: 244303413, 403: 246818413, 404: 249349413, 405: 251896413,
        406: 254459413, 407: 257038413, 408: 259633413, 409: 262244413, 410: 264871413,
        411: 267514413, 412: 270173413, 413: 272848413, 414: 275539413, 415: 278246413,
        416: 280969413, 417: 283708413, 418: 286463413, 419: 289234413, 420: 292021413,
        421: 294824413, 422: 297644413, 423: 300481413, 424: 303335413, 425: 306206413,
        426: 309094413, 427: 311999413, 428: 314921413, 429: 317860413, 430: 320816413,
        431: 323789413, 432: 326779413, 433: 329786413, 434: 332810413, 435: 335851413,
        436: 338909413, 437: 341984413, 438: 345076413, 439: 348185413, 440: 351311413,
        441: 354454413, 442: 357615413, 443: 360794413, 444: 363991413, 445: 367206413,
        446: 370439413, 447: 373690413, 448: 376959413, 449: 380246413, 450: 383551413,
        451: 386874413, 452: 390215413, 453: 393574413, 454: 396951413, 455: 400346413,
        456: 403759413, 457: 407190413, 458: 410639413, 459: 414106413, 460: 417591413,
        461: 421094413, 462: 424616413, 463: 428157413, 464: 431717413, 465: 435296413,
        466: 438894413, 467: 442511413, 468: 446147413, 469: 449802413, 470: 453476413,
        471: 457169413, 472: 460881413, 473: 464612413, 474: 468362413, 475: 472131413,
        476: 475919413, 477: 479726413, 478: 483552413, 479: 487397413, 480: 491261413,
        481: 495144413, 482: 499047413, 483: 502970413, 484: 506913413, 485: 510876413,
        486: 514859413, 487: 518862413, 488: 522885413, 489: 526928413, 490: 530991413,
        491: 535074413, 492: 539177413, 493: 543300413, 494: 547443413, 495: 551606413,
        496: 555789413, 497: 559992413, 498: 564215413, 499: 568458413, 500: 572721413,
        501: 577004413, 502: 581337413, 503: 585720413, 504: 590153413, 505: 594636413,
        506: 599169413, 507: 603752413, 508: 608385413, 509: 613068413, 510: 617801413,
        511: 622584413, 512: 627417413, 513: 632300413, 514: 637233413, 515: 642216413,
        516: 647249413, 517: 652332413, 518: 657465413, 519: 662648413, 520: 667881413,
        521: 673164413, 522: 678499413, 523: 683886413, 524: 689325413, 525: 694816413,
        526: 700359413, 527: 705954413, 528: 711601413, 529: 717300413, 530: 723051413,
        531: 728854413, 532: 734709413, 533: 740616413, 534: 746575413, 535: 752586413,
        536: 758649413, 537: 764764413, 538: 770931413, 539: 777150413, 540: 783421413,
        541: 789744413, 542: 796121413, 543: 802552413, 544: 809037413, 545: 815576413,
        546: 822169413, 547: 828816413, 548: 835517413, 549: 842272413, 550: 849081413,
        551: 855944413, 552: 862861413, 553: 869832413, 554: 876857413, 555: 883936413,
        556: 891069413, 557: 898256413, 558: 905497413, 559: 912792413, 560: 920141413,
        561: 927544413, 562: 935003413, 563: 942518413, 564: 950089413, 565: 957716413,
        566: 965399413, 567: 973138413, 568: 980933413, 569: 988784413, 570: 996691413,
        571: 1004654413, 572: 1012673413, 573: 1020748413, 574: 1028879413, 575: 1037066413,
        576: 1045309413, 577: 1053608413, 578: 1061963413, 579: 1070374413, 580: 1078841413,
        581: 1087364413, 582: 1095945413, 583: 1104584413, 584: 1113281413, 585: 1122036413,
        586: 1130849413, 587: 1139720413, 588: 1148649413, 589: 1157636413, 590: 1166681413,
        591: 1175784413, 592: 1184945413, 593: 1194164413, 594: 1203441413, 595: 1212776413,
        596: 1222169413, 597: 1231620413, 598: 1241129413, 599: 1250696413, 600: 1260321413,
        601: 1270004413, 602: 1279747413, 603: 1289550413, 604: 1299413413, 605: 1309336413,
        606: 1319319413, 607: 1329362413, 608: 1339465413, 609: 1349628413, 610: 1359851413,
        611: 1370134413, 612: 1380477413, 613: 1390880413, 614: 1401343413, 615: 1411866413,
        616: 1422449413, 617: 1433092413, 618: 1443795413, 619: 1454558413, 620: 1465381413,
        621: 1476264413, 622: 1487209413, 623: 1498216413, 624: 1509285413, 625: 1520416413,
        626: 1531609413, 627: 1542864413, 628: 1554181413, 629: 1565560413, 630: 1577001413,
        631: 1588504413, 632: 1600069413, 633: 1611696413, 634: 1623385413, 635: 1635136413,
        636: 1646949413, 637: 1658824413, 638: 1670761413, 639: 1682760413, 640: 1694821413,
        641: 1706944413, 642: 1719131413, 643: 1731382413, 644: 1743697413, 645: 1756076413,
        646: 1768519413, 647: 1781026413, 648: 1793597413, 649: 1806232413, 650: 1818931413,
        651: 1831694413, 652: 1844521413, 653: 1857412413, 654: 1870367413, 655: 1883386413,
        656: 1896469413, 657: 1909616413, 658: 1922827413, 659: 1936102413, 660: 1949441413,
        661: 1962844413, 662: 1976313413, 663: 1989848413, 664: 2003449413, 665: 2017116413,
        666: 2030849413, 667: 2044648413, 668: 2058513413, 669: 2072444413, 670: 2086441413,
        671: 2100504413, 672: 2114633413, 673: 2128828413, 674: 2143089413, 675: 2157416413,
        676: 2171809413, 677: 2186268413, 678: 2200793413, 679: 2215384413, 680: 2229975413,
        681: 2244698413, 682: 2259489413, 683: 2274348413, 684: 2289275413, 685: 2304225413,
        686: 2319288413, 687: 2334419413, 688: 2349618413, 689: 2364885413, 690: 2380220413,
        691: 2395623413, 692: 2411094413, 693: 2426633413, 694: 2442240413, 695: 2457915413,
        696: 2473658413, 697: 2489469413, 698: 2505348413, 699: 2521295413, 700: 2537310413,
        701: 2553393413, 702: 2569546413, 703: 2585769413, 704: 2602062413, 705: 2618425413,
        706: 2634858413, 707: 2651361413, 708: 2667934413, 709: 2684577413, 710: 2701290413,
        711: 2718073413, 712: 2734926413, 713: 2751849413, 714: 2768842413, 715: 2785905413,
        716: 2803038413, 717: 2820241413, 718: 2837514413, 719: 2854857413, 720: 2872270413,
        721: 2889753413, 722: 2907308413, 723: 2924935413, 724: 2942634413, 725: 2960405413,
        726: 2978248413, 727: 2996163413, 728: 3014150413, 729: 3032209413, 730: 3050340413,
        731: 3068543413, 732: 3086818413, 733: 3105165413, 734: 3123584413, 735: 3142075413,
        736: 3160638413, 737: 3179273413, 738: 3197980413, 739: 3216759413, 740: 3235610413,
        741: 3254533413, 742: 3273530413, 743: 3292601413, 744: 3311746413, 745: 3330965413,
        746: 3350258413, 747: 3369625413, 748: 3389066413, 749: 3408581413, 750: 3428170413,
        751: 3447833413, 752: 3467570413, 753: 3487381413, 754: 3507266413, 755: 3527225413,
        756: 3547258413, 757: 3567365413, 758: 3587546413, 759: 3607801413, 760: 3628130413,
        761: 3648533413, 762: 3669012413, 763: 3689567413, 764: 3710198413, 765: 3730905413,
        766: 3751688413, 767: 3772547413, 768: 3793482413, 769: 3814493413, 770: 3835580413,
        771: 3856743413, 772: 3877982413, 773: 3899297413, 774: 3920688413, 775: 3942155413,
        776: 3963698413, 777: 3985317413, 778: 4007012413, 779: 4028783413, 780: 4050630413,
        781: 4072553413, 782: 4094554413, 783: 4116633413, 784: 4138790413, 785: 4161025413,
        786: 4183338413, 787: 4205729413, 788: 4228198413, 789: 4250745413, 790: 4273370413,
        791: 4296073413, 792: 4318854413, 793: 4341713413, 794: 4364650413, 795: 4387665413,
        796: 4410758413, 797: 4433929413, 798: 4457178413, 799: 4480505413, 800: 4503910413,
        801: 4527393413, 802: 4550956413, 803: 4574599413, 804: 4598322413, 805: 4622125413,
        806: 4646008413, 807: 4669971413, 808: 4694014413, 809: 4718137413, 810: 4742340413,
        811: 4766623413, 812: 4790986413, 813: 4815429413, 814: 4839952413, 815: 4864555413,
        816: 4889238413, 817: 4914001413, 818: 4938844413, 819: 4963767413, 820: 4988770413,
        821: 5013853413, 822: 5039018413, 823: 5064265413, 824: 5089594413, 825: 5115005413,
        826: 5140498413, 827: 5166073413, 828: 5191730413, 829: 5217469413, 830: 5243290413,
        831: 5269193413, 832: 5295178413, 833: 5321245413, 834: 5347394413, 835: 5373625413,
        836: 5399938413, 837: 5426333413, 838: 5452810413, 839: 5479369413, 840: 5506010413,
        841: 5532733413, 842: 5559540413, 843: 5586431413, 844: 5613406413, 845: 5640465413,
        846: 5667608413, 847: 5694835413, 848: 5722146413, 849: 5749541413, 850: 5777020413,
        851: 5804583413, 852: 5832230413, 853: 5859961413, 854: 5887776413, 855: 5915675413,
        856: 5943658413, 857: 5971725413, 858: 5999876413, 859: 6028111413, 860: 6056430413,
        861: 6084833413, 862: 6113322413, 863: 6141897413, 864: 6170558413, 865: 6199305413,
        866: 6228138413, 867: 6257057413, 868: 6286062413, 869: 6315153413, 870: 6344330413,
        871: 6373593413, 872: 6402942413, 873: 6432377413, 874: 6461898413, 875: 6491505413,
        876: 6521198413, 877: 6550977413, 878: 6580842413, 879: 6610793413, 880: 6640830413,
        881: 6670953413, 882: 6701164413, 883: 6731463413, 884: 6761850413, 885: 6792325413,
        886: 6822888413, 887: 6853539413, 888: 6884278413, 889: 6915105413, 890: 6946020413,
        891: 6977023413, 892: 7008114413, 893: 7039293413, 894: 7070560413, 895: 7101915413,
        896: 7133358413, 897: 7164889413, 898: 7196508413, 899: 7228215413, 900: 7260010413,
        901: 7291893413, 902: 7323866413, 903: 7355929413, 904: 7388082413, 905: 7420325413,
        906: 7452658413, 907: 7485081413, 908: 7517594413, 909: 7550197413, 910: 7582890413,
        911: 7615673413, 912: 7648546413, 913: 7681509413, 914: 7714562413, 915: 7747705413,
        916: 7780938413, 917: 7814261413, 918: 7847674413, 919: 7881177413, 920: 7914770413,
        921: 7948453413, 922: 7982228413, 923: 8016095413, 924: 8050054413, 925: 8084105413,
        926: 8118248413, 927: 8152483413, 928: 8186810413, 929: 8221229413, 930: 8255740413,
        931: 8290343413, 932: 8325038413, 933: 8359825413, 934: 8394704413, 935: 8429675413,
        936: 8464738413, 937: 8499893413, 938: 8535140413, 939: 8570479413, 940: 8605910413,
        941: 8641433413, 942: 8677050413, 943: 8712761413, 944: 8748566413, 945: 8784465413,
        946: 8820458413, 947: 8856545413, 948: 8892726413, 949: 8929001413, 950: 8965370413,
        951: 9001833413, 952: 9038390413, 953: 9075041413, 954: 9111786413, 955: 9148625413,
        956: 9185558413, 957: 9222585413, 958: 9259706413, 959: 9296921413, 960: 9334230413,
        961: 9371633413, 962: 9409132413, 963: 9446727413, 964: 9484418413, 965: 9522205413,
        966: 9560088413, 967: 9598067413, 968: 9636142413, 969: 9674313413, 970: 9712580413,
        971: 9750943413, 972: 9789402413, 973: 9827957413, 974: 9866608413, 975: 9905355413,
        976: 9944198413, 977: 9983137413, 978: 10022172413, 979: 10061303413, 980: 10100530413,
        981: 10139853413, 982: 10179274413, 983: 10218793413, 984: 10258410413, 985: 10298125413,
        986: 10337938413, 987: 10377849413, 988: 10417858413, 989: 10457965413, 990: 10498170413,
        991: 10538473413, 992: 10578874413, 993: 10619373413, 994: 10659970413, 995: 10700665413,
        996: 10741458413, 997: 10782349413, 998: 10823338413, 999: 10864425413, 1000: 10905610413,
        1001: 10946893413, 1002: 10988276413, 1003: 11029759413, 1004: 11071342413, 1005: 11113025413,
        1006: 11154808413, 1007: 11196691413, 1008: 11238674413, 1009: 11280757413, 1010: 11322940413,
        1011: 11365223413, 1012: 11407606413, 1013: 11450089413, 1014: 11492672413, 1015: 11535355413,
        1016: 11578138413, 1017: 11621021413, 1018: 11664004413, 1019: 11707087413, 1020: 11750270413,
        1021: 11793553413, 1022: 11836938413, 1023: 11880425413, 1024: 11924014413, 1025: 11967705413,
        1026: 12011498413, 1027: 12055393413, 1028: 12099390413, 1029: 12143489413, 1030: 12187690413,
        1031: 12231993413, 1032: 12276398413, 1033: 12320905413, 1034: 12365514413, 1035: 12410225413,
        1036: 12455038413, 1037: 12499953413, 1038: 12544970413, 1039: 12590089413, 1040: 12635310413,
        1041: 12680633413, 1042: 12726060413, 1043: 12771591413, 1044: 12817226413, 1045: 12862965413,
        1046: 12908808413, 1047: 12954755413, 1048: 13000806413, 1049: 13046961413, 1050: 13093220413,
        1051: 13139583413, 1052: 13186050413, 1053: 13232621413, 1054: 13279296413, 1055: 13326075413,
        1056: 13372958413, 1057: 13419945413, 1058: 13467036413, 1059: 13514231413, 1060: 13561530413,
        1061: 13608933413, 1062: 13656442413, 1063: 13704057413, 1064: 13751778413, 1065: 13799605413,
        1066: 13847538413, 1067: 13895577413, 1068: 13943722413, 1069: 13991973413, 1070: 14040330413,
        1071: 14088793413, 1072: 14137362413, 1073: 14186037413, 1074: 14234818413, 1075: 14283705413,
        1076: 14332698413, 1077: 14381797413, 1078: 14431002413, 1079: 14480313413, 1080: 14529730413,
        1081: 14579253413, 1082: 14628884413, 1083: 14678623413, 1084: 14728470413, 1085: 14778425413,
        1086: 14828488413, 1087: 14878659413, 1088: 14928938413, 1089: 14979325413, 1090: 15029820413,
        1091: 15080423413, 1092: 15131134413, 1093: 15181953413, 1094: 15232880413, 1095: 15283915413,
        1096: 15335058413, 1097: 15386309413, 1098: 15437668413, 1099: 15489135413, 1100: 15540710413,
        1101: 15592393413, 1102: 15644186413, 1103: 15696089413, 1104: 15748102413, 1105: 15800225413,
        1106: 15852458413, 1107: 15904801413, 1108: 15957254413, 1109: 16009817413, 1110: 16062490413,
        1111: 16115273413, 1112: 16168166413, 1113: 16221169413, 1114: 16274282413, 1115: 16327505413,
        1116: 16380838413, 1117: 16434278413, 1118: 16487831413, 1119: 16541494413, 1120: 16595267413,
        1121: 16649150413, 1122: 16703145413, 1123: 16757252413, 1124: 16811471413, 1125: 16865802413,
        1126: 16920245413, 1127: 16974800413, 1128: 17029467413, 1129: 17084246413, 1130: 17139137413,
        1131: 17194140413, 1132: 17249255413, 1133: 17304482413, 1134: 17359821413, 1135: 17415272413,
        1136: 17470835413, 1137: 17526510413, 1138: 17582297413, 1139: 17638196413, 1140: 17694207413,
        1141: 17750330413, 1142: 17806567413, 1143: 17862918413, 1144: 17919383413, 1145: 17975962413,
        1146: 18032655413, 1147: 18089462413, 1148: 18146383413, 1149: 18203418413, 1150: 18260567413,
        1151: 18317830413, 1152: 18375207413, 1153: 18432698413, 1154: 18490303413, 1155: 18548022413,
        1156: 18605855413, 1157: 18663802413, 1158: 18721863413, 1159: 18780038413, 1160: 18838327413,
        1161: 18896730413, 1162: 18955249413, 1163: 19013884413, 1164: 19072635413, 1165: 19131502413,
        1166: 19190485413, 1167: 19249584413, 1168: 19308799413, 1169: 19368130413, 1170: 19427577413,
        1171: 19487140413, 1172: 19546819413, 1173: 19606614413, 1174: 19666525413, 1175: 19726552413,
        1176: 19786695413, 1177: 19846954413, 1178: 19907329413, 1179: 19967820413, 1180: 20028427413,
        1181: 20089150413, 1182: 20149991413, 1183: 20210950413, 1184: 20272027413, 1185: 20333222413,
        1186: 20394535413, 1187: 20455966413, 1188: 20517515413, 1189: 20579182413, 1190: 20640967413,
        1191: 20702870413, 1192: 20764891413, 1193: 20827030413, 1194: 20889287413, 1195: 20951662413,
        1196: 21014155413, 1197: 21076766413, 1198: 21139495413, 1199: 21202342413, 1200: 21265307413,
        1201: 21328390413, 1202: 21391593413, 1203: 21454916413, 1204: 21518359413, 1205: 21581922413,
        1206: 21645605413, 1207: 21709408413, 1208: 21773331413, 1209: 21837374413, 1210: 21901537413,
        1211: 21965820413, 1212: 22030223413, 1213: 22094746413, 1214: 22159389413, 1215: 22224152413,
        1216: 22289035413, 1217: 22354038413, 1218: 22419161413, 1219: 22484404413, 1220: 22549767413,
        1221: 22615250413, 1222: 22680855413, 1223: 22746582413, 1224: 22812431413, 1225: 22878402413,
        1226: 22944495413, 1227: 23010710413, 1228: 23077047413, 1229: 23143506413, 1230: 23210087413,
        1231: 23276790413, 1232: 23343615413, 1233: 23410562413, 1234: 23477631413, 1235: 23544822413,
        1236: 23612135413, 1237: 23679570413, 1238: 23747127413, 1239: 23814806413, 1240: 23882607413,
        1241: 23950530413, 1242: 24018577413, 1243: 24086748413, 1244: 24155043413, 1245: 24223462413,
        1246: 24292005413, 1247: 24360672413, 1248: 24429463413, 1249: 24498378413, 1250: 24567417413,
        1251: 24636580413, 1252: 24705867413, 1253: 24775278413, 1254: 24844813413, 1255: 24914472413,
        1256: 24984255413, 1257: 25054162413, 1258: 25124193413, 1259: 25194348413, 1260: 25264627413,
        1261: 25335030413, 1262: 25405559413, 1263: 25476214413, 1264: 25546995413, 1265: 25617902413,
        1266: 25688935413, 1267: 25760094413, 1268: 25831379413, 1269: 25902790413, 1270: 25974327413,
        1271: 26045990413, 1272: 26117779413, 1273: 26189694413, 1274: 26261735413, 1275: 26333902413,
        1276: 26406195413, 1277: 26478614413, 1278: 26551159413, 1279: 26623830413, 1280: 26696627413,
        1281: 26769550413, 1282: 26842601413, 1283: 26915780413, 1284: 26989087413, 1285: 27062522413,
        1286: 27136085413, 1287: 27209776413, 1288: 27283595413, 1289: 27357542413, 1290: 27431617413,
        1291: 27505820413, 1292: 27580151413, 1293: 27654610413, 1294: 27729197413, 1295: 27803912413,
        1296: 27878755413, 1297: 27953726413, 1298: 28028825413, 1299: 28104052413, 1300: 28179407413,
        1301: 28254890413, 1302: 28330503413, 1303: 28410503413, 1304: 28490503413, 1305: 28570503413,
        1306: 28650503413, 1307: 28730503413, 1308: 28810503413, 1309: 28890503413, 1310: 28970503413,
        1311: 29050503413, 1312: 29130503413, 1313: 29210503413, 1314: 29290503413, 1315: 29370503413,
        1316: 29450503413, 1317: 29530503413, 1318: 29610503413, 1319: 29690503413, 1320: 29770503413,
        1321: 29850503413, 1322: 29930503413, 1323: 30010503413, 1324: 30090503413, 1325: 30170503413,
        1326: 30250503413, 1327: 30330503413, 1328: 30410503413, 1329: 30490503413, 1330: 30570503413,
        1331: 30650503413, 1332: 30730503413, 1333: 30810503413, 1334: 30890503413, 1335: 30970503413,
        1336: 31050503413, 1337: 31130503413, 1338: 31210503413, 1339: 31290503413, 1340: 31370503413,
        1341: 31450503413, 1342: 31530503413, 1343: 31610503413, 1344: 31690503413, 1345: 31770503413,
        1346: 31850503413, 1347: 31930503413, 1348: 32010503413, 1349: 32090503413, 1350: 32170503413,
        1351: 32250503413, 1352: 32330503413, 1353: 32410503413, 1354: 32490503413, 1355: 32570503413,
        1356: 32650503413, 1357: 32730503413, 1358: 32810503413, 1359: 32890503413, 1360: 32970503413,
        1361: 33050503413, 1362: 33130503413, 1363: 33210503413, 1364: 33290503413, 1365: 33370503413,
        1366: 33450503413, 1367: 33530503413, 1368: 33610503413, 1369: 33690503413, 1370: 33770503413,
        1371: 33850503413, 1372: 33930503413, 1373: 34010503413, 1374: 34090503413, 1375: 34170503413,
        1376: 34250503413, 1377: 34330503413, 1378: 34410503413, 1379: 34490503413, 1380: 34570503413,
        1381: 34650503413, 1382: 34730503413, 1383: 34810503413, 1384: 34890503413, 1385: 34970503413,
        1386: 35050503413, 1387: 35130503413, 1388: 35210503413, 1389: 35290503413, 1390: 35370503413,
        1391: 35450503413, 1392: 35530503413, 1393: 35610503413, 1394: 35690503413, 1395: 35770503413,
        1396: 35850503413, 1397: 35930503413, 1398: 36010503413, 1399: 36090503413, 1400: 36170503413,
        1401: 36260503413, 1402: 36350503413, 1403: 36440503413, 1404: 36530503413, 1405: 36620503413,
        1406: 36710503413, 1407: 36800503413, 1408: 36890503413, 1409: 36980503413, 1410: 37070503413,
        1411: 37160503413, 1412: 37250503413, 1413: 37340503413, 1414: 37430503413, 1415: 37520503413,
        1416: 37610503413, 1417: 37700503413, 1418: 37790503413, 1419: 37880503413, 1420: 37970503413,
        1421: 38060503413, 1422: 38150503413, 1423: 38240503413, 1424: 38330503413, 1425: 38420503413,
        1426: 38510503413, 1427: 38600503413, 1428: 38690503413, 1429: 38780503413, 1430: 38870503413,
        1431: 38960503413, 1432: 39050503413, 1433: 39140503413, 1434: 39230503413, 1435: 39320503413,
        1436: 39410503413, 1437: 39500503413, 1438: 39590503413, 1439: 39680503413, 1440: 39770503413,
        1441: 39860503413, 1442: 39950503413, 1443: 40040503413, 1444: 40130503413, 1445: 40220503413,
        1446: 40310503413, 1447: 40400503413, 1448: 40490503413, 1449: 40580503413, 1450: 40670503413,
        1451: 40760503413, 1452: 40850503413, 1453: 40940503413, 1454: 41030503413, 1455: 41120503413,
        1456: 41210503413, 1457: 41300503413, 1458: 41390503413, 1459: 41480503413, 1460: 41570503413,
        1461: 41660503413, 1462: 41750503413, 1463: 41840503413, 1464: 41930503413, 1465: 42020503413,
        1466: 42110503413, 1467: 42200503413, 1468: 42290503413, 1469: 42380503413, 1470: 42470503413,
        1471: 42560503413, 1472: 42650503413, 1473: 42740503413, 1474: 42830503413, 1475: 42920503413,
        1476: 43010503413, 1477: 43100503413, 1478: 43190503413, 1479: 43280503413, 1480: 43370503413,
        1481: 43460503413, 1482: 43550503413, 1483: 43640503413, 1484: 43730503413, 1485: 43820503413,
        1486: 43910503413, 1487: 44000503413, 1488: 44090503413, 1489: 44180503413, 1490: 44270503413,
        1491: 44360503413, 1492: 44450503413, 1493: 44540503413, 1494: 44630503413, 1495: 44720503413,
        1496: 44810503413, 1497: 44900503413, 1498: 44990503413, 1499: 45080503413, 1500: 45170503413
    };

    // --- 経験値テーブル (Lv1501以降の定義) ---
    const expPerLevelRangesAfter1500Data = [
        [1501, 1600, 100000000], [1601, 1700, 110000000], [1701, 1800, 120000000],
        [1801, 1900, 130000000], [1901, 2000, 140000000], [2001, 2100, 150000000],
        [2101, 2200, 150500000], [2201, 2300, 150500000], [2301, 2400, 151000000],
        [2401, 2500, 151000000], [2501, 2600, 151000000],
        [2601, 2700, 151500000], [2701, 2800, 151500000], [2801, 2900, 151500000],
        [2901, 3000, 151500000], [3001, 3200, 160000000],
        [3201, 3300, 160000000],
        [3301, 3400, 160000000],
        [3401, 3500, 160000000],
        [3501, 3800, 170000000]
    ];

    let fullExpTable = { ...expTableLv1to1500 };

    function populateExpTableAfter1500() {
        // ★★★ populateExpTableAfter1500 関数呼び出し確認 ★★★
        console.log('[leveling-calculator.js] populateExpTableAfter1500 function called.');
        if ((!fullExpTable[1500] && fullExpTable[1500] !== 0) || typeof fullExpTable[1500] === 'undefined') {
            console.error("[leveling-calculator.js] CRITICAL: expTableLv1to1500 does not contain valid data for Lv 1500. Cannot populate further. Value:", fullExpTable[1500]);
            return;
        }
        let lastCumulativeExp = fullExpTable[1500];
        let lastProcessedLevel = 1500;
        console.log(`[leveling-calculator.js] Starting populateExpTableAfter1500. Initial cumulative EXP for Lv1500: ${lastCumulativeExp}`);


        expPerLevelRangesAfter1500Data.forEach((rangeArray, index) => {
            // ★★★ 各範囲の処理開始ログ ★★★
            // console.log(`[leveling-calculator.js] Processing range ${index + 1}:`, rangeArray);

            if (!Array.isArray(rangeArray) || rangeArray.length < 3) {
                console.error(`[leveling-calculator.js] Invalid range data in expPerLevelRangesAfter1500Data at index ${index}:`, rangeArray);
                return; // この範囲の処理をスキップ
            }
            const startLv = rangeArray[0];
            const endLv = rangeArray[1];
            const expNeededPerLevelInThisRange = rangeArray[2];

            if (typeof startLv !== 'number' || typeof endLv !== 'number' || typeof expNeededPerLevelInThisRange !== 'number') {
                console.error(`[leveling-calculator.js] Invalid data type in range at index ${index}:`, rangeArray);
                return; // この範囲の処理をスキップ
            }
            if (startLv > endLv) {
                console.error(`[leveling-calculator.js] Start level (${startLv}) is greater than end level (${endLv}) in range at index ${index}:`, rangeArray);
                return;
            }


            for (let currentLv = Math.max(lastProcessedLevel + 1, startLv); currentLv <= endLv; currentLv++) {
                if (fullExpTable[currentLv] !== undefined) {
                    console.warn(`[leveling-calculator.js] Level ${currentLv} is already defined in fullExpTable. Current value: ${fullExpTable[currentLv]}. Skipping recalculation, but updating lastCumulativeExp.`);
                    lastCumulativeExp = fullExpTable[currentLv];
                    continue;
                }
                // Jupyter Notebookのロジックでは、範囲内の各レベルで expNeededPerLevelInThisRange を加算
                lastCumulativeExp += expNeededPerLevelInThisRange;
                fullExpTable[currentLv] = lastCumulativeExp;
                // ★★★ 各レベルの経験値計算ログ (大量に出るので注意) ★★★
                // if (currentLv % 100 === 0) console.log(`[leveling-calculator.js] Calculated Lv ${currentLv}: ${fullExpTable[currentLv]}`);
            }
            lastProcessedLevel = endLv;
        });

        const finalDefinedLevelKeys = Object.keys(fullExpTable).map(Number);
        if (finalDefinedLevelKeys.length > 0) {
            const maxLevelInTable = Math.max(...finalDefinedLevelKeys.filter(n => isFinite(n)));
             console.log(`[leveling-calculator.js] populateExpTableAfter1500 finished. Max level in table: ${maxLevelInTable}, Exp: ${fullExpTable[maxLevelInTable] ? fullExpTable[maxLevelInTable].toLocaleString() : 'N/A'}`);
        } else {
            console.error("[leveling-calculator.js] fullExpTable is empty after populateExpTableAfter1500.");
        }
         // ★★★ 構築後のテーブルの一部を出力して確認 ★★★
        // console.log('[leveling-calculator.js] Sample of fullExpTable after population (Lv1500-1505):');
        // for (let i = 1500; i <= 1505 && i <= lastProcessedLevel; i++) {
        //     console.log(`Lv ${i}: ${fullExpTable[i] ? fullExpTable[i].toLocaleString() : 'Undefined'}`);
        // }
        // console.log(`[leveling-calculator.js] Lv 3800 Exp: ${fullExpTable[3800] ? fullExpTable[3800].toLocaleString() : 'Undefined'}`);
    }

    populateExpTableAfter1500();

    // --- UI要素取得 ---
    // ★★★ UI要素取得ログ ★★★
    const currentLevelEl = document.getElementById('currentLevel');
    console.log('[leveling-calculator.js] currentLevelEl:', currentLevelEl ? 'Found' : 'NOT FOUND');
    const currentExpEl = document.getElementById('currentExp');
    console.log('[leveling-calculator.js] currentExpEl:', currentExpEl ? 'Found' : 'NOT FOUND');
    const calcModeSelectEl = document.getElementById('calcModeSelect');
    console.log('[leveling-calculator.js] calcModeSelectEl:', calcModeSelectEl ? 'Found' : 'NOT FOUND');
    const targetLevelEl = document.getElementById('targetLevel');
    console.log('[leveling-calculator.js] targetLevelEl:', targetLevelEl ? 'Found' : 'NOT FOUND');
    const sessionCountEl = document.getElementById('sessionCount');
    console.log('[leveling-calculator.js] sessionCountEl:', sessionCountEl ? 'Found' : 'NOT FOUND');
    const expSettingSelectEl = document.getElementById('expSettingSelect');
    console.log('[leveling-calculator.js] expSettingSelectEl:', expSettingSelectEl ? 'Found' : 'NOT FOUND');
    const calculateButton = document.getElementById('calculateButton');
    console.log('[leveling-calculator.js] calculateButton:', calculateButton ? 'Found' : 'NOT FOUND');
    const resultSummaryEl = document.getElementById('resultSummary');
    console.log('[leveling-calculator.js] resultSummaryEl:', resultSummaryEl ? 'Found' : 'NOT FOUND');
    const resultLogTableContainerEl = document.getElementById('resultLogTableContainer');
    console.log('[leveling-calculator.js] resultLogTableContainerEl:', resultLogTableContainerEl ? 'Found' : 'NOT FOUND');
    const levelingChartCanvas = document.getElementById('levelingChart');
    console.log('[leveling-calculator.js] levelingChartCanvas:', levelingChartCanvas ? 'Found' : 'NOT FOUND');
    let levelingChart = null;

    const targetLevelGroup = document.getElementById('targetLevelGroup');
    console.log('[leveling-calculator.js] targetLevelGroup:', targetLevelGroup ? 'Found' : 'NOT FOUND');
    const sessionCountGroup = document.getElementById('sessionCountGroup');
    console.log('[leveling-calculator.js] sessionCountGroup:', sessionCountGroup ? 'Found' : 'NOT FOUND');


    function checkAllUIElementsExist() {
        const elements = [
            currentLevelEl, currentExpEl, calcModeSelectEl, targetLevelEl,
            sessionCountEl, expSettingSelectEl, calculateButton, resultSummaryEl,
            resultLogTableContainerEl, levelingChartCanvas, targetLevelGroup, sessionCountGroup
        ];
        const elementNames = [
            'currentLevelEl', 'currentExpEl', 'calcModeSelectEl', 'targetLevelEl',
            'sessionCountEl', 'expSettingSelectEl', 'calculateButton', 'resultSummaryEl',
            'resultLogTableContainerEl', 'levelingChartCanvas', 'targetLevelGroup', 'sessionCountGroup'
        ];
        let allExist = true;
        elements.forEach((el, index) => {
            if (!el) {
                console.error(`[leveling-calculator.js] CRITICAL UI Element Missing: ${elementNames[index]}`);
                allExist = false;
            }
        });
        return allExist;
    }
    const essentialUIExists = checkAllUIElementsExist();


    // --- 計算モード切り替え処理 ---
    function handleCalcModeChange() {
        if (!calcModeSelectEl || !targetLevelGroup || !sessionCountGroup) {
            console.warn("[leveling-calculator.js] Calculation mode UI elements (calcModeSelectEl, targetLevelGroup, or sessionCountGroup) not found for handleCalcModeChange.");
            return;
        }
        // ★★★ 計算モード変更ログ ★★★
        console.log(`[leveling-calculator.js] handleCalcModeChange called. Selected mode: ${calcModeSelectEl.value}`);
        if (calcModeSelectEl.value === 'target') {
            targetLevelGroup.style.display = 'block';
            sessionCountGroup.style.display = 'none';
        } else {
            targetLevelGroup.style.display = 'none';
            sessionCountGroup.style.display = 'block';
        }
    }
    if (calcModeSelectEl) {
        calcModeSelectEl.addEventListener('change', handleCalcModeChange);
        handleCalcModeChange(); // 初期表示
    } else {
        console.warn("[leveling-calculator.js] calcModeSelectEl not found, cannot set up mode change listener or initial state for dropdown.");
        // ラジオボタンフォールバックは削除 (HTML構造に合わせるため、calcModeSelectが必須とする)
    }

    // --- 計算ロジック関数 ---
    function getExpForTargetLevel(targetLevel) {
        // ★★★ getExpForTargetLevel 呼び出しログ ★★★
        // console.log(`[leveling-calculator.js] getExpForTargetLevel called for Lv: ${targetLevel}`);
        if (targetLevel < 1) return 0;
        if (fullExpTable[targetLevel] !== undefined) {
            return fullExpTable[targetLevel];
        }
        console.warn(`[leveling-calculator.js] Experience data for Lv ${targetLevel} not found in fullExpTable.`);
        return Infinity;
    }

    function getLevelFromExp(totalExpFromLv1) {
        // ★★★ getLevelFromExp 呼び出しログ ★★★
        // console.log(`[leveling-calculator.js] getLevelFromExp called with totalExp: ${totalExpFromLv1}`);
        if (totalExpFromLv1 < 0) return 1;
        let currentLevel = 0; // 0 は未定義またはLv1未満の経験値を示す
        const sortedLevels = Object.keys(fullExpTable).map(Number).sort((a, b) => a - b);

        for (const lv of sortedLevels) {
            if (lv === 0 && totalExpFromLv1 >=0) { // Lv1の必要経験値は0なので、totalExpFromLv1が0以上ならLv1には到達している
                currentLevel = 1; // Lv1は経験値0で到達
                continue;
            }
            if (lv > 0 && fullExpTable[lv] <= totalExpFromLv1) {
                currentLevel = lv;
            } else if (lv > 0 && fullExpTable[lv] > totalExpFromLv1) {
                break;
            }
        }
        // console.log(`[leveling-calculator.js] Level from exp ${totalExpFromLv1} is ${Math.max(1, currentLevel)}`);
        return Math.max(1, currentLevel);
    }

    function calculateLevelingToTargetLevel(startLevel, targetLevel, startLevelCurrentExp = 0, effectiveExpPerSession) {
        // ★★★ calculateLevelingToTargetLevel 呼び出しログ ★★★
        console.log(`[leveling-calculator.js] calculateLevelingToTargetLevel: StartLv=${startLevel}, TargetLv=${targetLevel}, StartExp=${startLevelCurrentExp}, Exp/Session=${effectiveExpPerSession}`);
        let currentTotalExpFromLv1 = getExpForTargetLevel(startLevel) + startLevelCurrentExp;
        const targetExpNeeded = getExpForTargetLevel(targetLevel);

        if (targetExpNeeded === Infinity) {
            return { error: `目標レベル(${targetLevel.toLocaleString()})の経験値データがありません。経験値テーブルの上限を確認してください。` };
        }
        if (currentTotalExpFromLv1 === Infinity) { // 開始レベルの経験値が取得できない場合
             return { error: `開始レベル(${startLevel.toLocaleString()})の経験値データがありません。`};
        }

        let sessions = 0;
        let totalCost = 0;
        const logData = [{
            "セッション": 0, "到達Lv": startLevel, "上昇Lv": 0, "累計費用(G)": 0,
            "累計総Exp(Lv1から)": currentTotalExpFromLv1, "獲得Exp(セッション)": 0
        }];

        let currentLevelSim = startLevel;
        let previousLevelSim = startLevel;
        const MAX_SESSIONS = 50000; // 上限引き上げ

        while (currentLevelSim < targetLevel || (currentLevelSim === targetLevel && currentTotalExpFromLv1 < targetExpNeeded)) {
            if (sessions >= MAX_SESSIONS) {
                console.warn("[leveling-calculator.js] Max sessions reached in calculateLevelingToTargetLevel.");
                return { error: `計算回数が上限(${MAX_SESSIONS.toLocaleString()})に達しました。条件を見直してください。` };
            }
            sessions++;
            totalCost += COST_PER_LEVELING_SESSION;
            currentTotalExpFromLv1 += effectiveExpPerSession;
            currentLevelSim = getLevelFromExp(currentTotalExpFromLv1);

            logData.push({
                "セッション": sessions, "到達Lv": currentLevelSim, "上昇Lv": currentLevelSim - previousLevelSim,
                "累計費用(G)": totalCost, "累計総Exp(Lv1から)": currentTotalExpFromLv1, "獲得Exp(セッション)": effectiveExpPerSession
            });
            if (currentLevelSim > previousLevelSim) { // レベルが実際に上がった場合のみ previousLevelSim を更新
                previousLevelSim = currentLevelSim;
            }

            if (currentLevelSim >= getLevelFromExp(Infinity)-1 && currentLevelSim < targetLevel ) { // ほぼ最大レベルに近いのに目標に届かない場合
                 console.warn(`[leveling-calculator.js] Approaching max defined level (${currentLevelSim}) but target (${targetLevel}) not reached. Possible data issue or extreme target.`);
                 if (sessions > MAX_SESSIONS / 2) break; // 早めに抜ける
            }
        }
        const finalLevelReached = getLevelFromExp(currentTotalExpFromLv1);
        const expForFinalLevel = getExpForTargetLevel(finalLevelReached);
        const finalExpInLevel = (expForFinalLevel === Infinity) ? Infinity : currentTotalExpFromLv1 - expForFinalLevel;
        console.log(`[leveling-calculator.js] calculateLevelingToTargetLevel finished. Sessions: ${sessions}`);
        return { totalSessions: sessions, totalCost: totalCost, finalLevel: finalLevelReached, finalExpInLevel: finalExpInLevel, log: logData };
    }

    function calculateLevelingBySessionCount(startLevel, numSessions, startLevelCurrentExp = 0, effectiveExpPerSession) {
        // ★★★ calculateLevelingBySessionCount 呼び出しログ ★★★
        console.log(`[leveling-calculator.js] calculateLevelingBySessionCount: StartLv=${startLevel}, NumSessions=${numSessions}, StartExp=${startLevelCurrentExp}, Exp/Session=${effectiveExpPerSession}`);
        let currentTotalExpFromLv1 = getExpForTargetLevel(startLevel) + startLevelCurrentExp;
        if (currentTotalExpFromLv1 === Infinity) {
             return { error: `開始レベル(${startLevel.toLocaleString()})の経験値データがありません。`};
        }

        let totalCost = 0;
        const logData = [{
            "セッション": 0, "到達Lv": startLevel, "上昇Lv": 0, "累計費用(G)": 0,
            "累計総Exp(Lv1から)": currentTotalExpFromLv1, "獲得Exp(セッション)": 0
        }];
        let currentLevelSim = startLevel;
        let previousLevelSim = startLevel;

        for (let i = 0; i < numSessions; i++) {
            totalCost += COST_PER_LEVELING_SESSION;
            currentTotalExpFromLv1 += effectiveExpPerSession;
            currentLevelSim = getLevelFromExp(currentTotalExpFromLv1);
            logData.push({
                "セッション": i + 1, "到達Lv": currentLevelSim, "上昇Lv": currentLevelSim - previousLevelSim,
                "累計費用(G)": totalCost, "累計総Exp(Lv1から)": currentTotalExpFromLv1, "獲得Exp(セッション)": effectiveExpPerSession
            });
            if (currentLevelSim > previousLevelSim) {
                previousLevelSim = currentLevelSim;
            }
        }
        const finalLevelReached = getLevelFromExp(currentTotalExpFromLv1);
        const expForFinalLevel = getExpForTargetLevel(finalLevelReached);
        const finalExpInLevel = (expForFinalLevel === Infinity) ? Infinity : currentTotalExpFromLv1 - expForFinalLevel;
        console.log(`[leveling-calculator.js] calculateLevelingBySessionCount finished.`);
        return { totalSessions: numSessions, totalCost: totalCost, finalLevel: finalLevelReached, finalExpInLevel: finalExpInLevel, log: logData };
    }

    // --- 計算実行イベント ---
    if (calculateButton && essentialUIExists) { // ★★★ UI要素が全て揃っているかも条件に追加 ★★★
        console.log('[leveling-calculator.js] Adding click listener to calculateButton.');
        calculateButton.addEventListener('click', function() {
            // ★★★ ボタンクリック確認 ★★★
            console.log('[leveling-calculator.js] Calculate button CLICKED!');
            try { // ★★★ 計算処理全体をtry...catchで囲む ★★★
                const startLevel = parseInt(currentLevelEl.value);
                const startExp = parseInt(currentExpEl.value) || 0;
                const selectedExpKey = expSettingSelectEl.value;
                const effectiveExpPerSession = expSettings[selectedExpKey] || expSettings["default"];

                // ★★★ 入力値ログ ★★★
                console.log(`[leveling-calculator.js] Inputs - StartLv: ${startLevel}, StartExp: ${startExp}, ExpKey: ${selectedExpKey}, EffectiveExp: ${effectiveExpPerSession}`);

                if (isNaN(startLevel) || startLevel < 1) { alert("現在のレベルは1以上で正しく入力してください。"); return; }
                if (isNaN(startExp) || startExp < 0) { alert("現在のレベルでの獲得済み経験値は0以上で正しく入力してください。"); return; }

                let result;
                const currentCalcMode = calcModeSelectEl.value; // HTMLに合わせてセレクトボックスを前提とする
                console.log(`[leveling-calculator.js] Calculation mode: ${currentCalcMode}`);


                if (currentCalcMode === 'target') {
                    const targetLevel = parseInt(targetLevelEl.value);
                    if (isNaN(targetLevel) || targetLevel < 1) { alert("目標レベルは1以上で正しく入力してください。"); return; }

                    const currentLevelMaxExp = getExpForTargetLevel(startLevel + 1) - getExpForTargetLevel(startLevel);
                    if (targetLevel < startLevel || (targetLevel === startLevel && startExp >= currentLevelMaxExp && currentLevelMaxExp > 0) ) {
                        alert("目標レベルは現在のレベルより高く設定するか、現在のレベルで未カンストの場合に設定してください。");
                        return;
                    }
                    result = calculateLevelingToTargetLevel(startLevel, targetLevel, startExp, effectiveExpPerSession);
                } else { // 'session' mode
                    const numSessions = parseInt(sessionCountEl.value);
                    if (isNaN(numSessions) || numSessions < 1) { alert("レベリング回数は1以上で正しく入力してください。"); return; }
                    result = calculateLevelingBySessionCount(startLevel, numSessions, startExp, effectiveExpPerSession);
                }
                // ★★★ 計算結果ログ ★★★
                console.log('[leveling-calculator.js] Calculation result:', JSON.parse(JSON.stringify(result))); // deep copy for logging
                displayResults(result);

            } catch (e) {
                console.error("[leveling-calculator.js] Error during calculation execution:", e);
                alert("計算中に予期せぬエラーが発生しました。コンソールを確認してください。");
                if(resultSummaryEl) resultSummaryEl.innerHTML = `<p class="text-danger">計算エラー: ${e.message}</p>`;
            }
        });
    } else {
        if (!calculateButton) console.error('[leveling-calculator.js] CRITICAL: Calculate button was not found AFTER DOMContentLoaded. Cannot add event listener.');
        if (!essentialUIExists) console.error('[leveling-calculator.js] CRITICAL: Not all essential UI elements were found. Event listener for calculate button NOT added.');
    }

    // --- 結果表示関数 ---
    function displayResults(result) {
        // ★★★ displayResults 呼び出しログ ★★★
        console.log('[leveling-calculator.js] displayResults called with result:', JSON.parse(JSON.stringify(result)));

        if (!resultSummaryEl || !resultLogTableContainerEl || !levelingChartCanvas) {
            console.error("[leveling-calculator.js] Result display elements not found in displayResults.");
            return;
        }

        if (result.error) {
            resultSummaryEl.innerHTML = `<p class="text-danger">エラー: ${result.error}</p>`;
            resultLogTableContainerEl.innerHTML = '';
            if (levelingChart) { try { levelingChart.destroy(); levelingChart = null; } catch(e){ console.warn("Error destroying chart", e)} }
            return;
        }
        if (!result || typeof result.totalSessions === 'undefined') { // 結果オブジェクトの基本的な検証
             console.error("[leveling-calculator.js] Invalid result object passed to displayResults:", result);
             resultSummaryEl.innerHTML = `<p class="text-danger">エラー: 計算結果が無効です。</p>`;
             return;
        }


        resultSummaryEl.innerHTML = `
            <p>総レベリング回数: ${result.totalSessions.toLocaleString()} 回</p>
            <p>総費用: ${result.totalCost.toLocaleString()} G</p>
            <p>最終到達レベル: ${result.finalLevel.toLocaleString()}</p>
            <p>最終レベルでの獲得経験値: ${(result.finalExpInLevel !== undefined && isFinite(result.finalExpInLevel) ? result.finalExpInLevel : 0).toLocaleString()}</p>
        `;

        if (result.log && result.log.length > 0) {
            let tableHTML = '<div class="table-responsive"><table class="table table-striped table-sm"><thead><tr><th>セッション</th><th>到達Lv</th><th>上昇Lv</th><th>累計費用(G)</th><th>累計総Exp</th><th>獲得Exp(セッション)</th></tr></thead><tbody>';
            result.log.forEach(logEntry => {
                tableHTML += `<tr>
                    <td>${(logEntry["セッション"] !== undefined ? logEntry["セッション"] : '-').toLocaleString()}</td>
                    <td>${(logEntry["到達Lv"] !== undefined ? logEntry["到達Lv"] : '-').toLocaleString()}</td>
                    <td>${(logEntry["上昇Lv"] !== undefined ? logEntry["上昇Lv"] : '-').toLocaleString()}</td>
                    <td>${(logEntry["累計費用(G)"] !== undefined ? logEntry["累計費用(G)"] : '-').toLocaleString()}</td>
                    <td>${(logEntry["累計総Exp(Lv1から)"] !== undefined ? logEntry["累計総Exp(Lv1から)"] : '-').toLocaleString()}</td>
                    <td>${(logEntry["獲得Exp(セッション)"] !== undefined ? logEntry["獲得Exp(セッション)"] : '-').toLocaleString()}</td>
                </tr>`;
            });
            tableHTML += '</tbody></table></div>';
            resultLogTableContainerEl.innerHTML = tableHTML;
        } else {
            resultLogTableContainerEl.innerHTML = '<p>ログデータがありません。</p>';
        }

        if (levelingChart) { try { levelingChart.destroy(); levelingChart = null; } catch(e){ console.warn("Error destroying chart", e)} }

        if (result.log && result.log.length > 1 && typeof Chart !== 'undefined') {
            const labels = result.log.map(logEntry => logEntry["セッション"]);
            const data = result.log.map(logEntry => logEntry["到達Lv"]);

            if (labels.length === 0 || data.length === 0) {
                console.warn("[leveling-calculator.js] No data for chart labels or datasets.");
                return;
            }

            const minLevel = Math.min(...data.filter(d => isFinite(d))); // 無限大を除外
            const maxLevel = Math.max(...data.filter(d => isFinite(d)));

            if (!isFinite(minLevel) || !isFinite(maxLevel)) {
                console.warn("[leveling-calculator.js] Min or Max level for chart is not finite. Cannot render chart properly.");
                return;
            }


            let yMin = Math.max(0, minLevel - Math.ceil((maxLevel - minLevel) * 0.1));
            let yMax = maxLevel + Math.ceil((maxLevel - minLevel) * 0.1);
            if (minLevel === maxLevel) { // レベル変動がない場合
                yMin = Math.max(0, minLevel - 5);
                yMax = maxLevel + 5;
            }
             if (yMin >= yMax) yMin = yMax -1; // 最小値が最大値以上になるのを防ぐ


            // ★★★ グラフ描画データログ ★★★
            console.log('[leveling-calculator.js] Chart data - Labels:', labels);
            console.log('[leveling-calculator.js] Chart data - Data points:', data);
            console.log(`[leveling-calculator.js] Chart Y-axis - Min: ${yMin}, Max: ${yMax}`);


            try {
                levelingChart = new Chart(levelingChartCanvas, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: '到達レベル', data: data, borderColor: 'rgb(75, 192, 192)', tension: 0.1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: (yMin <=0), // データが0に近い場合は0から始める
                                min: yMin,
                                max: yMax,
                                ticks: {
                                   stepSize: Math.max(1, Math.ceil((yMax - yMin) / 10)) || 1
                                }
                            },
                            x: { title: { display: true, text: 'セッション回数' } }
                        },
                        responsive: true, maintainAspectRatio: false
                    }
                });
                 console.log("[leveling-calculator.js] Chart rendered successfully.");
            } catch (chartError) {
                console.error("[leveling-calculator.js] Error rendering chart:", chartError);
                 if (levelingChartCanvas.getContext('2d')) {
                     const ctx = levelingChartCanvas.getContext('2d');
                     ctx.clearRect(0,0,levelingChartCanvas.width, levelingChartCanvas.height);
                     ctx.font = "14px Arial"; ctx.fillStyle = "orange"; ctx.textAlign = "center";
                     ctx.fillText("グラフ描画エラー発生。詳細はコンソールを確認。", levelingChartCanvas.width/2, levelingChartCanvas.height/2);
                 }
            }


        } else if (typeof Chart === 'undefined') {
            console.warn("[leveling-calculator.js] Chart.js is not loaded. Cannot render graph.");
            if (levelingChartCanvas && levelingChartCanvas.getContext('2d')) {
                 const ctx = levelingChartCanvas.getContext('2d');
                 ctx.clearRect(0,0,levelingChartCanvas.width, levelingChartCanvas.height);
                 ctx.font = "14px Arial"; ctx.fillStyle = "red"; ctx.textAlign = "center";
                 ctx.fillText("グラフライブラリ(Chart.js)未読込", levelingChartCanvas.width/2, levelingChartCanvas.height/2);
            }
        } else {
             console.log("[leveling-calculator.js] Not enough data to render chart or Chart.js not available.");
        }
    }

    // 初期表示の調整
    if (essentialUIExists && calcModeSelectEl) {
        handleCalcModeChange();
    } else {
        console.warn("[leveling-calculator.js] Skipping initial call to handleCalcModeChange due to missing UI elements (calcModeSelectEl or others).");
    }
    console.log('[leveling-calculator.js] End of DOMContentLoaded.');
});

console.log('[leveling-calculator.js] Script execution finished (end of file).');